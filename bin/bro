#!/bin/bash

# bro - A script to send prompts to OpenAI's Chat Completion API and display the response.

# Function to display usage
usage() {
    echo "Usage: bro <prompt>"
    echo "Example: bro 'Explain the benefits of using Git in software development.'"
    exit 1
}

# Check if a prompt is provided
if [ "$#" -lt 1 ]; then
    usage
fi

# Check if OPENAI_API_KEY is set
if [ -z "$OPENAI_API_KEY" ]; then
    echo "Error: OPENAI_API_KEY is not set. Please set it as an environment variable."
    exit 1
fi

# Check for required commands
for cmd in curl jq bat; do
    if ! command -v $cmd &> /dev/null; then
        echo "Error: '$cmd' is not installed. Please install it to use this script."
        exit 1
    fi
done

# Combine all arguments into a single prompt string
prompt="$*"

# Create a temporary file
temp_file=$(mktemp) || { echo "Failed to create temp file"; exit 1; }

# Make the API request to OpenAI
response=$(curl -s https://api.openai.com/v1/chat/completions \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "{
        \"model\": \"gpt-4o-mini\",
        \"messages\": [{\"role\": \"user\", \"content\": \"${prompt//\"/\\\"}\"}],
        \"temperature\": 0.0
    }")

# Check if curl was successful
if [ $? -ne 0 ]; then
    echo "Error: Failed to execute curl command."
    rm -f "$temp_file"
    exit 1
fi

# Extract the response content using jq and write to the temp file
echo "$response" | jq -r '.choices[0].message.content' > "$temp_file"

# Check if jq was successful
if [ $? -ne 0 ]; then
    echo "Error: Failed to parse JSON response."
    rm -f "$temp_file"
    exit 1
fi

# Display the content using batcat
bat --style=plain --paging=never --language=markdown "$temp_file"

# Remove the temporary file
rm -f "$temp_file"
